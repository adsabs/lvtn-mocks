version: "3.0"
services:
  lvtn_postgres:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=test
    ports:
      - '25432:5432'
    volumes:
      - .tmp/postgres:/var/lib/postgresql/data
  lvtn_zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: lvtn-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc lvtn_zookeeper 2181 || exit 1
      retries: 3
      interval: 10s

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - lvtn_kafka
      - lvtn_schema_registry
      - lvtn_connect
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: lvtn-kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: lvtn-zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://lvtn-schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://lvtn-connect:8083

  lvtn_kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: lvtn-kafka
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
      - "29092:29092"
    depends_on:
      lvtn_zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'lvtn-zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://lvtn-kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://ltvn-schema-registry:8085

  lvtn_connect:
    image: lvtn_connect
    build:
      context: .
      dockerfile: ./Dockerfile.kafka-connect
    hostname: lvtn-connect
    container_name: lvtn_connect
    depends_on:
      - lvtn_kafka
      - lvtn_schema_registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'lvtn-kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://lvtn-schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.1.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  lvtn_schema_registry:
    image: confluentinc/cp-schema-registry:7.1.0
    hostname: lvtn-schema-registry
    container_name: lvtn-schema-registry
    depends_on:
      - lvtn_kafka
    ports:
      - "8085:8085"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: ltvn-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'lvtn-kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
  lvtn_nginx:
    image: nginx
    container_name: lvtn-nginx
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - target: 80
        published: 9980
        protocol: tcp
    volumes:
      - "./tests/stubdata:/etc/nginx/html:ro"
      - "./tests/nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
  lvtn_ftpd:
    image: stilliard/pure-ftpd
    container_name: lvtn-ftpd
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - target: 21
        published: 9921
        protocol: tcp
        mode: host
      - target: 30000
        published: 30000
        protocol: tcp
        mode: host
    volumes:
      # remember to replace /folder_on_disk/ with the path to where you want to store the files on the host machine
      - "./tests/stubdata:/home/test/"
      #- "/folder_on_disk/passwd:/etc/pure-ftpd/passwd"
      # uncomment for ssl/tls, see https://github.com/stilliard/docker-pure-ftpd#tls
      - "./tests/ssl:/etc/ssl/private/"
      # or ssl/tls with Let's Encrypt (cert and key as two files)
      #      - "/etc/letsencrypt/live/<your_server>/cert.pem:/etc/ssl/private/pure-ftpd-cert.pem"
      #      - "/etc/letsencrypt/live/<your_server>/privkey.pem:/etc/ssl/private/pure-ftpd-key.pem"
    environment:
      PUBLICHOST: "lvtn_ftpd"
      FTP_USER_NAME: test
      FTP_USER_PASS: test
      ADDED_FLAGS: "--verboselog"
